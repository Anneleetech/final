<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mc.full17th2.dao.ReadPostAllDAO">
<!-- selectPosts: post 테이블에서 게시물을 조회하는 쿼리입니다. LIMIT와 OFFSET을 사용하여 페이징 처리가 이루어짐 

#{limit} 및 #{offset}은 MyBatis의 파라미터 바인딩을 나타내며, 실행 시에 실제 값으로 대체됨 -->
	<select id="selectPosts" resultType="postdto">
		select * from visionartdb.post 
		WHERE post_field_id = 0 
		order by post_id DESC
		LIMIT #{pageSize} OFFSET #{offset}
	</select>
	<!--selectMembers: member 테이블에서 모든 회원 정보를 조회하는 쿼리  -->
	<select id="selectMembers" resultType="memberdto2">
		select * from visionartdb.member
	</select>
	<!-- artfieldName  -->
	<select id="getArtFieldName" resultType="artfielddto">
	select * from visionartdb.art_field;
	</select>
	<!--selectTotalPosts: post 테이블에서 전체 게시물 수를 조회하는 쿼리  -->
	<select id="getTotalPosts" resultType="int">
		SELECT COUNT(*) AS totalPosts FROM visionartdb.post WHERE post_field_id = 0
	</select>
	
	
	<!-- selectPosts: post 테이블에서 게시물을 조회하는 쿼리입니다. LIMIT와 OFFSET을 사용하여 페이징 처리가 이루어짐 
#{limit} 및 #{offset}은 MyBatis의 파라미터 바인딩을 나타내며, 실행 시에 실제 값으로 대체됨 -->
	  <select id="selectUgPostsByPostField" resultType="ugpostdto">
        SELECT * FROM visionartdb.post WHERE post_field_id = 1 ORDER BY post_id DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

	<!--selectMembers: member 테이블에서 모든 회원 정보를 조회하는 쿼리  -->
	<select id="selectUgMembers" resultType="ugmemberdto">
		select * from visionartdb.member
	</select>
	
		<!--selectMembers: member 테이블에서 모든 회원 정보를 조회하는 쿼리  -->
	<select id="selectUgMembersButMe" parameterType="int" resultType="ugmemberdto">
		select * from visionartdb.member
		WHERE
		member_id = #{member_id} order by post_id DESC;
	</select>
	
	<!--selectTotalPosts: post 테이블에서 전체 게시물 수를 조회하는 쿼리  -->
	<select id="getUgTotalPosts" resultType="int">
		SELECT COUNT(*) AS totalPosts FROM visionartdb.post WHERE post_field_id = 1
	</select>
	<!-- artfieldName  -->
	<select id="getUgArtFieldName" resultType="ugartfielddto">
	select * from visionartdb.art_field;
	</select>
	
	<!--getLikes: post_like 테이블에서 특정 회원이 좋아요를 누른 게시물을 조회하는 쿼리  -->
	<select id="getLikes" resultType="likedto" parameterType="int">
		SELECT * FROM visionartdb.post_like where member_id = #{memberId}
	</select>
	<!-- updateLike: post_like 테이블에 좋아요 정보를 추가하는 쿼리  -->
<insert id="updateLike" parameterType="map">
    INSERT INTO visionartdb.post_like (member_id, post_id) VALUES (#{memberid}, #{post_id})
</insert>

	<!--likeExists: post_like 테이블에서 특정 회원이 특정 게시물에 대해 좋아요를 눌렀는지 확인하는 쿼리-->
	<select id="likeExists" resultType="long" parameterType="map">
    SELECT COUNT(*) FROM visionartdb.post_like WHERE member_id = #{memberid} AND post_id = #{post_id};
</select>

	<!--deleteLikes: post_like 테이블에서 특정 회원이 특정 게시물에 대한 좋아요를 취소하는 쿼리  -->
	<delete id="deleteLike" parameterType="map">
		DELETE FROM visionartdb.post_like WHERE	member_id = #{memberid} AND post_id = #{post_id}
	</delete>
	<!--likeTotal: post_like 테이블에서 전체 좋아요 정보를 조회하는 쿼리  -->
	<select id="likeTotal" resultType="likedto">
		SELECT * FROM visionartdb.post_like;
	</select>
	<!--imageTotal: post_attachment 테이블에서 모든 이미지 정보를 조회하는 쿼리  -->
	<select id="imageTotal" resultType="imagedto">
		SELECT * FROM visionartdb.post_attachment;
	</select>
	
	
	
	
</mapper>
